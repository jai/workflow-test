---
name: Issue to PR

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  implement-issue:
    runs-on: ubuntu-latest
    # Run if:
    # 1. Issue comment with @claude-implement (not on PRs)
    # 2. PR comment with @claude (for making changes to existing PRs)
    if: |
      github.event_name == 'issue_comment' && (
        (contains(github.event.comment.body, '@claude-implement') && github.event.issue.pull_request == null) ||
        (contains(github.event.comment.body, '@claude') && github.event.issue.pull_request != null)
      )
    
    steps:
      # Check permissions
      - name: Check actor permissions
        id: check-permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq .permission 2>/dev/null || echo "none")
          echo "Actor (${{ github.actor }}) has '${PERMISSION}' permission on this repository."
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "maintain" || "$PERMISSION" == "write" ]]; then
            echo "is_authorized=true" >> $GITHUB_OUTPUT
          else
            echo "is_authorized=false" >> $GITHUB_OUTPUT
            echo "::error::Actor does not have write, maintain, or admin permissions on this repository"
          fi

      - uses: actions/checkout@v4
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          fetch-depth: 0

      # Configure Git
      - name: Configure Git
        if: steps.check-permissions.outputs.is_authorized == 'true'
        run: |
          # Configure basic Git user
          git config --global user.name "Jai Govindani (via GitHub Actions)"
          git config --global user.email "jai@govindani.com"
          
          # Check if GPG secrets are available for commit signing
          if [[ -n "${{ secrets.GPG_SIGNING_KEY }}" ]] && [[ -n "${{ vars.GPG_KEY_ID }}" ]]; then
            echo "üîê GPG secrets found, configuring signed commits"
            
            # Import GPG key (handling both with and without passphrase)
            echo -n "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > gpg.key
            if [[ -n "${{ secrets.GPG_PASSPHRASE }}" ]]; then
              gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --pinentry-mode loopback --import gpg.key
            else
              gpg --batch --yes --import gpg.key
            fi
            rm gpg.key
          
            # Configure GPG
            mkdir -p ~/.gnupg
            cat <<EOF > ~/.gnupg/gpg.conf
          use-agent
          EOF
          
            cat <<EOF > ~/.gnupg/gpg-agent.conf
          allow-loopback-pinentry
          EOF
          
            gpg-connect-agent reloadagent /bye
          
            # Configure Git for signing
            git config --global user.signingkey "${{ vars.GPG_KEY_ID }}"
            git config --global commit.gpgsign true
            git config --global gpg.program gpg
            
            # Test GPG signing
            if [[ -n "${{ secrets.GPG_PASSPHRASE }}" ]]; then
              echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign -u ${{ vars.GPG_KEY_ID }} -o /dev/null
            else
              echo "test" | gpg --batch --yes --sign -u ${{ vars.GPG_KEY_ID }} -o /dev/null
            fi
          else
            echo "‚ö†Ô∏è GPG secrets not configured, commits will not be signed"
            echo "To enable commit signing, add these secrets to your repository:"
            echo "  - GPG_SIGNING_KEY (base64 encoded GPG private key)"
            echo "  - GPG_PASSPHRASE (passphrase for the GPG key)"
            echo "  - GPG_KEY_ID (GPG key ID to use for signing)"
            git config --global commit.gpgsign false
          fi
          
          echo "‚úÖ Git configuration complete"

      # Extract issue/PR details
      - name: Extract issue/PR details
        id: extract-issue
        if: steps.check-permissions.outputs.is_authorized == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if this is a PR comment or issue comment
          IS_PR="${{ github.event.issue.pull_request != null }}"
          
          if [[ "$IS_PR" == "true" ]]; then
            # This is a PR comment
            echo "is_pr=true" >> $GITHUB_OUTPUT
            PR_NUMBER="${{ github.event.issue.number }}"
            
            # Get PR details
            PR_DATA=$(gh pr view $PR_NUMBER --json headRefName,title,author)
            BRANCH_NAME=$(echo "$PR_DATA" | jq -r '.headRefName')
            PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
            
            echo "issue_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "issue_title=$PR_TITLE" >> $GITHUB_OUTPUT
            echo "issue_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            echo "üìã PR #$PR_NUMBER: $PR_TITLE"
            echo "üë§ Author: @$PR_AUTHOR"
            echo "üåø Existing Branch: $BRANCH_NAME"
          else
            # This is an issue comment
            echo "is_pr=false" >> $GITHUB_OUTPUT
            
            # Handle both issue and issue_comment events
            if [[ "${{ github.event_name }}" == "issues" ]]; then
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              ISSUE_TITLE="${{ github.event.issue.title }}"
              ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
            else
              # For issue_comment event
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              ISSUE_TITLE="${{ github.event.issue.title }}"
              ISSUE_AUTHOR="${{ github.event.comment.user.login }}"
            fi
            
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
            echo "issue_author=$ISSUE_AUTHOR" >> $GITHUB_OUTPUT
            
            # Create branch name from issue title
            BRANCH_NAME="claude/issue-${ISSUE_NUMBER}-$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-50)"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            echo "üìã Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
            echo "üë§ Author: @$ISSUE_AUTHOR"
            echo "üåø Branch: $BRANCH_NAME"
          fi

      # Create new branch or checkout existing PR branch
      - name: Setup branch
        id: setup-branch
        if: steps.check-permissions.outputs.is_authorized == 'true'
        run: |
          BRANCH_NAME="${{ steps.extract-issue.outputs.branch_name }}"
          IS_PR="${{ steps.extract-issue.outputs.is_pr }}"
          
          if [[ "$IS_PR" == "true" ]]; then
            # For PRs, fetch and checkout the existing branch
            echo "üîÑ Checking out existing PR branch: $BRANCH_NAME"
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
            echo "‚úÖ Switched to PR branch: $BRANCH_NAME"
          else
            # For issues, create and push new branch
            echo "üåø Creating new branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
            git push -u origin "$BRANCH_NAME"
            echo "‚úÖ Created and pushed branch: $BRANCH_NAME"
          fi

      # Post initial comment
      - name: Post starting comment
        if: steps.check-permissions.outputs.is_authorized == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IS_PR="${{ steps.extract-issue.outputs.is_pr }}"
          ISSUE_NUMBER="${{ steps.extract-issue.outputs.issue_number }}"
          BRANCH_NAME="${{ steps.extract-issue.outputs.branch_name }}"
          
          if [[ "$IS_PR" == "true" ]]; then
            # For PRs, post a different message
            gh pr comment $ISSUE_NUMBER --body "ü§ñ **Claude is making changes to this PR**

          I'm now working on the requested changes. I'll:
          1. Analyze your request
          2. Make the necessary code changes
          3. Commit and push to the PR branch
          4. Update you when complete

          Branch: \`$BRANCH_NAME\`
          
          _This is an automated update by Claude Opus 4.1_"
          else
            # For issues, post the original message
            gh issue comment $ISSUE_NUMBER --body "ü§ñ **Claude is implementing this issue**

          I'm now working on implementing the requirements from this issue. I'll:
          1. Analyze the requirements
          2. Implement the solution
          3. Create tests if applicable
          4. Open a PR when complete

          Branch: \`$BRANCH_NAME\`
          
          _This is an automated implementation by Claude Opus 4.1_"
          fi

      # Determine if track_progress is supported for this event
      - name: Check track_progress support
        id: check-track-progress
        if: steps.check-permissions.outputs.is_authorized == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event_name }}, Action: ${{ github.event.action }}"

          # Check if this event/action combination supports track_progress
          case "${{ github.event_name }}" in
            issues)
              case "${{ github.event.action }}" in
                opened)
                  echo "track_progress=true" >> $GITHUB_OUTPUT
                  echo "‚úÖ track_progress supported for issues/${{ github.event.action }}"
                  ;;
                *)
                  echo "track_progress=false" >> $GITHUB_OUTPUT
                  echo "‚ö†Ô∏è track_progress not supported for issues/${{ github.event.action }}"
                  ;;
              esac
              ;;
            *)
              echo "track_progress=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è track_progress not supported for ${{ github.event_name }}/${{ github.event.action }}"
              ;;
          esac

      # Run Claude to implement the issue
      - uses: anthropics/claude-code-action@v1
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Use JAI_GITHUB_PAT for PR creation (has repo scope)
          github_token: ${{ secrets.JAI_GITHUB_PAT }}
          track_progress: ${{ steps.check-track-progress.outputs.track_progress }}
          use_commit_signing: true
          claude_args: |
            --model claude-opus-4-1-20250805
            --system-prompt "YOU ARE ON BRANCH: ${{ steps.extract-issue.outputs.branch_name }}
            
            CRITICAL: You MUST create a pull request at the end. Follow these EXACT steps:
            
            1. Implement the solution for issue #${{ steps.extract-issue.outputs.issue_number }}
            2. Commit your changes using git commands (for GPG signing):
               - Use: git add -A && git commit -m 'feat: Description of your changes'
               - This ensures commits are GPG signed
            3. CREATE THE PULL REQUEST using mcp__github__create_pull_request tool:
               - title: 'feat: Description of what you implemented'
               - body: 'Fixes #${{ steps.extract-issue.outputs.issue_number }}\n\nSummary of changes...'
               - base: 'master'
               - head: '${{ steps.extract-issue.outputs.branch_name }}'
               
               If MCP tools fail, use Bash as fallback:
               - git add -A && git commit -m 'feat: your message' && git push
               - gh pr create --title 'feat: Description' --body 'Fixes #${{ steps.extract-issue.outputs.issue_number }}' --base master --head ${{ steps.extract-issue.outputs.branch_name }}
            
            IMPORTANT: The branch '${{ steps.extract-issue.outputs.branch_name }}' already exists and you are on it. Do NOT create a new branch.
            IMPORTANT: You MUST create a PR. This is not optional. The task is not complete without a PR."
            --allowedTools "mcp__github__add_comment_to_pending_review,
            mcp__github__add_pull_request_review_comment,
            mcp__github__create_issue,
            mcp__github__create_issue_comment,
            mcp__github__create_or_update_file,
            mcp__github__create_pending_pull_request_review,
            mcp__github__create_pull_request,
            mcp__github__delete_file,
            mcp__github__get_file_contents,
            mcp__github__get_issue,
            mcp__github__get_issue_comments,
            mcp__github__get_pull_request_diff,
            mcp__github__list_issues,
            mcp__github__search_issues,
            mcp__github__submit_pending_pull_request_review,
            mcp__github__update_issue,
            mcp__github_ci__download_job_log,
            mcp__github_ci__get_ci_status,
            mcp__github_ci__get_workflow_run_details,
            mcp__github_comment__update,
            mcp__github_comment__update_claude_comment,
            mcp__github_file_ops__delete_files,
            mcp__github_inline_comment__create_inline_comment,
            Bash,Read,Write,Edit,MultiEdit,Grep,Glob,WebFetch,WebSearch,TodoWrite"
          prompt: |
            REPO: ${{ github.repository }}
            ISSUE NUMBER: ${{ steps.extract-issue.outputs.issue_number }}
            IS_PR: ${{ steps.extract-issue.outputs.is_pr }}
            
            ${{ steps.extract-issue.outputs.is_pr == 'true' && '## Task: Update Pull Request' || '## Task: Implement GitHub Issue' }}
            
            ${{ steps.extract-issue.outputs.is_pr == 'true' && format('You need to make changes to PR #{0} based on the comment requesting changes.', steps.extract-issue.outputs.issue_number) || format('You need to implement the solution for issue #{0}.', steps.extract-issue.outputs.issue_number) }}
            
            ### Instructions:
            
            1. **Understand the requirements**: 
               ${{ steps.extract-issue.outputs.is_pr == 'true' && '- Get the PR details using mcp__github__get_pull_request' || '- Get the issue details using mcp__github__get_issue' }}
               - Review any comments with ${{ steps.extract-issue.outputs.is_pr == 'true' && 'mcp__github__get_pull_request_comments' || 'mcp__github__get_issue_comments' }}
               ${{ steps.extract-issue.outputs.is_pr == 'true' && '- Focus on the specific changes requested in the @claude comment' || '' }}
            
            2. **Implement the solution**:
               - Read existing files using mcp__github__get_file_contents or Read tool
               - Create or update files using mcp__github__create_or_update_file or Write/Edit tools
               - Follow existing code patterns and conventions
               - Add appropriate error handling
               - Include tests where applicable
            
            3. **Save your work**:
               - Use git commands to commit changes (for GPG signing): git add -A && git commit -m '${{ steps.extract-issue.outputs.is_pr == 'true' && 'fix: ' || 'feat: ' }}your message'
               - Create atomic, well-described commits
               - Use conventional commit format (feat:, fix:, docs:, etc.)
               - Reference ${{ steps.extract-issue.outputs.is_pr == 'true' && 'PR' || 'issue' }} #${{ steps.extract-issue.outputs.issue_number }} in commit messages
               - The branch "${{ steps.extract-issue.outputs.branch_name }}" has already been ${{ steps.extract-issue.outputs.is_pr == 'true' && 'checked out' || 'created' }} for you
               - Push your changes: git push
            
            ${{ steps.extract-issue.outputs.is_pr == 'true' && '### Critical Requirements:
            - You are working on an existing PR - just push your changes
            - Do NOT create a new PR
            - The PR already exists as PR #' || '4. **Create the Pull Request** (MANDATORY):
               YOU MUST create a pull request using mcp__github__create_pull_request tool:
               - title: "feat: Clear description of what you implemented"
               - body: "Fixes #' }}${{ steps.extract-issue.outputs.issue_number }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || '\n\n## Summary\n[Your summary here]"
               - base: "master"
               - head: "' }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || steps.extract-issue.outputs.branch_name }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || '"
               
               If MCP tool fails, use gh CLI as fallback:
               gh pr create --title "feat: [description]" --body "Fixes #' }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || steps.extract-issue.outputs.issue_number }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || '" --base master --head ' }}${{ steps.extract-issue.outputs.is_pr == 'true' && '' || steps.extract-issue.outputs.branch_name }}
            
            ### Critical Requirements:
            - You are already on branch: ${{ steps.extract-issue.outputs.branch_name }}
            - Do NOT create a new branch
            ${{ steps.extract-issue.outputs.is_pr == 'true' && '- Do NOT create a new PR - you are updating an existing one' || '- You MUST create a PR - the task is incomplete without it' }}
            ${{ steps.extract-issue.outputs.is_pr == 'true' && '' || '- If one PR method fails, try the other' }}
            
            ${{ steps.extract-issue.outputs.is_pr == 'true' && '' || 'FAILURE TO CREATE A PR MEANS THE TASK IS INCOMPLETE.' }}

      # Post-processing: Create PR if Claude didn't (only for issues, not PR updates)
      - name: Ensure PR is created
        if: steps.check-permissions.outputs.is_authorized == 'true' && steps.extract-issue.outputs.is_pr != 'true'
        env:
          # Use JAI_GITHUB_PAT for PR creation (has repo scope)
          GH_TOKEN: ${{ secrets.JAI_GITHUB_PAT }}
        run: |
          echo "üîç Checking if PR was created..."
          sleep 10  # Give Claude time to create PR
          
          # Check if PR exists for the branch
          EXISTING_PR=$(gh pr list --head "${{ steps.extract-issue.outputs.branch_name }}" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -z "$EXISTING_PR" ]]; then
            echo "‚ö†Ô∏è No PR found. Creating one automatically..."
            
            # First, ensure any uncommitted changes are pushed
            if [[ -n $(git status --porcelain) ]]; then
              echo "üìù Committing uncommitted changes..."
              git add -A
              git commit -m "feat: implement issue #${{ steps.extract-issue.outputs.issue_number }}
              
              Automated implementation by Claude
              
              Fixes #${{ steps.extract-issue.outputs.issue_number }}"
            fi
            
            # Push the branch
            git push -u origin "${{ steps.extract-issue.outputs.branch_name }}" 2>/dev/null || echo "Branch already exists on remote"
            
            # Create PR
            PR_BODY="Fixes #${{ steps.extract-issue.outputs.issue_number }}
            
            Summary: This PR implements the solution for issue #${{ steps.extract-issue.outputs.issue_number }}.
            
            Issue: ${{ steps.extract-issue.outputs.issue_title }}
            Author: @${{ steps.extract-issue.outputs.issue_author }}
            
            The changes in this PR were implemented by Claude Opus 4.1 through automated workflow.
            
            _ü§ñ PR created automatically after Claude implementation_"
            
            PR_URL=$(gh pr create \
              --title "feat: Implement #${{ steps.extract-issue.outputs.issue_number }} - ${{ steps.extract-issue.outputs.issue_title }}" \
              --body "$PR_BODY" \
              --base master \
              --head "${{ steps.extract-issue.outputs.branch_name }}" 2>/dev/null) || echo "PR may already exist"
            
            if [[ -n "$PR_URL" ]]; then
              echo "‚úÖ Created PR: $PR_URL"
              
              # Update issue with PR link
              gh issue comment ${{ steps.extract-issue.outputs.issue_number }} --body "‚úÖ **Pull Request Created**
              
              The implementation is complete and a pull request has been created:
              $PR_URL
              
              Branch: \`${{ steps.extract-issue.outputs.branch_name }}\`"
            fi
          else
            echo "‚úÖ PR #$EXISTING_PR already exists"
          fi
      
      # Post completion comment
      - name: Post completion comment
        if: steps.check-permissions.outputs.is_authorized == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.JAI_GITHUB_PAT }}
          script: |
            const isPR = '${{ steps.extract-issue.outputs.is_pr }}' === 'true';
            const issueNumber = parseInt('${{ steps.extract-issue.outputs.issue_number }}');
            
            let comment;
            if (isPR) {
              comment = `‚úÖ **Changes Applied**
              
              The requested changes have been applied to this PR and pushed to the branch.
              
              Branch: \`${{ steps.extract-issue.outputs.branch_name }}\`
              
              _Changes applied by Claude Opus 4.1 ü§ñ_`;
            } else {
              // For issues, the comment is already posted by the Ensure PR step
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });
