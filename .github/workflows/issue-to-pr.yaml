---
name: Issue to PR

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  implement-issue:
    runs-on: ubuntu-latest
    # Only run if comment contains @claude-implement (on issues, not PRs)
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '@claude-implement') &&
      github.event.issue.pull_request == null
    
    steps:
      # Check permissions
      - name: Check actor permissions
        id: check-permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq .permission 2>/dev/null || echo "none")
          echo "Actor (${{ github.actor }}) has '${PERMISSION}' permission on this repository."
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "maintain" || "$PERMISSION" == "write" ]]; then
            echo "is_authorized=true" >> $GITHUB_OUTPUT
          else
            echo "is_authorized=false" >> $GITHUB_OUTPUT
            echo "::error::Actor does not have write, maintain, or admin permissions on this repository"
          fi

      - uses: actions/checkout@v4
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          fetch-depth: 0

      # Configure Git
      - name: Configure Git
        if: steps.check-permissions.outputs.is_authorized == 'true'
        run: |
          # Configure basic Git user
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if GPG secrets are available for commit signing
          if [[ -n "${{ secrets.GPG_SIGNING_KEY }}" ]] && [[ -n "${{ secrets.GPG_PASSPHRASE }}" ]] && [[ -n "${{ secrets.GPG_KEY_ID }}" ]]; then
            echo "üîê GPG secrets found, configuring signed commits"
            
            # Import GPG key
            echo -n "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > gpg.key
            gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --pinentry-mode loopback --import gpg.key
            rm gpg.key
          
            # Configure GPG
            mkdir -p ~/.gnupg
            cat <<EOF > ~/.gnupg/gpg.conf
          use-agent
          EOF
          
            cat <<EOF > ~/.gnupg/gpg-agent.conf
          allow-loopback-pinentry
          EOF
          
            gpg-connect-agent reloadagent /bye
          
            # Configure Git for signing
            git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
            git config --global commit.gpgsign true
            git config --global gpg.program gpg
            
            # Test GPG signing
            echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign -u ${{ secrets.GPG_KEY_ID }} -o /dev/null
          else
            echo "‚ö†Ô∏è GPG secrets not configured, commits will not be signed"
            echo "To enable commit signing, add these secrets to your repository:"
            echo "  - GPG_SIGNING_KEY (base64 encoded GPG private key)"
            echo "  - GPG_PASSPHRASE (passphrase for the GPG key)"
            echo "  - GPG_KEY_ID (GPG key ID to use for signing)"
            git config --global commit.gpgsign false
          fi
          
          echo "‚úÖ Git configuration complete"

      # Extract issue details
      - name: Extract issue details
        id: extract-issue
        if: steps.check-permissions.outputs.is_authorized == 'true'
        run: |
          # Handle both issue and issue_comment events
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
          else
            # For issue_comment event
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_AUTHOR="${{ github.event.comment.user.login }}"
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          echo "issue_author=$ISSUE_AUTHOR" >> $GITHUB_OUTPUT
          
          # Create branch name from issue title
          BRANCH_NAME="claude/issue-${ISSUE_NUMBER}-$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-50)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "üìã Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
          echo "üë§ Author: @$ISSUE_AUTHOR"
          echo "üåø Branch: $BRANCH_NAME"

      # Create new branch
      - name: Create implementation branch
        id: create-branch
        if: steps.check-permissions.outputs.is_authorized == 'true'
        run: |
          BRANCH_NAME="${{ steps.extract-issue.outputs.branch_name }}"
          
          # Create and checkout new branch
          git checkout -b "$BRANCH_NAME"
          
          # Push the branch immediately so it exists on remote
          git push -u origin "$BRANCH_NAME"
          
          echo "‚úÖ Created and pushed branch: $BRANCH_NAME"

      # Post initial comment
      - name: Post starting comment
        if: steps.check-permissions.outputs.is_authorized == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ steps.extract-issue.outputs.issue_number }} --body "ü§ñ **Claude is implementing this issue**

          I'm now working on implementing the requirements from this issue. I'll:
          1. Analyze the requirements
          2. Implement the solution
          3. Create tests if applicable
          4. Open a PR when complete

          Branch: \`${{ steps.extract-issue.outputs.branch_name }}\`
          
          _This is an automated implementation by Claude Opus 4.1_"

      # Determine if track_progress is supported for this event
      - name: Check track_progress support
        id: check-track-progress
        if: steps.check-permissions.outputs.is_authorized == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event_name }}, Action: ${{ github.event.action }}"

          # Check if this event/action combination supports track_progress
          case "${{ github.event_name }}" in
            issues)
              case "${{ github.event.action }}" in
                opened)
                  echo "track_progress=true" >> $GITHUB_OUTPUT
                  echo "‚úÖ track_progress supported for issues/${{ github.event.action }}"
                  ;;
                *)
                  echo "track_progress=false" >> $GITHUB_OUTPUT
                  echo "‚ö†Ô∏è track_progress not supported for issues/${{ github.event.action }}"
                  ;;
              esac
              ;;
            *)
              echo "track_progress=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è track_progress not supported for ${{ github.event_name }}/${{ github.event.action }}"
              ;;
          esac

      # Run Claude to implement the issue
      - uses: anthropics/claude-code-action@v1
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Use JAI_GITHUB_PAT for PR creation (has repo scope)
          github_token: ${{ secrets.JAI_GITHUB_PAT }}
          track_progress: ${{ steps.check-track-progress.outputs.track_progress }}
          use_commit_signing: true
          claude_args: |
            --model claude-opus-4-1-20250805
            --system-prompt "YOU ARE ON BRANCH: ${{ steps.extract-issue.outputs.branch_name }}
            
            CRITICAL: You MUST create a pull request at the end. Follow these EXACT steps:
            
            1. Implement the solution for issue #${{ steps.extract-issue.outputs.issue_number }}
            2. Commit your changes using mcp__github_file_ops__commit_files tool:
               - message: 'feat: Description of your changes'
               - files: (the files you've modified)
            3. CREATE THE PULL REQUEST using mcp__github__create_pull_request tool:
               - title: 'feat: Description of what you implemented'
               - body: 'Fixes #${{ steps.extract-issue.outputs.issue_number }}\n\nSummary of changes...'
               - base: 'master'
               - head: '${{ steps.extract-issue.outputs.branch_name }}'
               
               If MCP tools fail, use Bash as fallback:
               - git add -A && git commit -m 'feat: your message' && git push
               - gh pr create --title 'feat: Description' --body 'Fixes #${{ steps.extract-issue.outputs.issue_number }}' --base master --head ${{ steps.extract-issue.outputs.branch_name }}
            
            IMPORTANT: The branch '${{ steps.extract-issue.outputs.branch_name }}' already exists and you are on it. Do NOT create a new branch.
            IMPORTANT: You MUST create a PR. This is not optional. The task is not complete without a PR."
            --allowedTools "mcp__github__add_comment_to_pending_review,
            mcp__github__add_pull_request_review_comment,
            mcp__github__create_issue,
            mcp__github__create_issue_comment,
            mcp__github__create_or_update_file,
            mcp__github__create_pending_pull_request_review,
            mcp__github__create_pull_request,
            mcp__github__delete_file,
            mcp__github__get_file_contents,
            mcp__github__get_issue,
            mcp__github__get_issue_comments,
            mcp__github__get_pull_request_diff,
            mcp__github__list_issues,
            mcp__github__search_issues,
            mcp__github__submit_pending_pull_request_review,
            mcp__github__update_issue,
            mcp__github_ci__download_job_log,
            mcp__github_ci__get_ci_status,
            mcp__github_ci__get_workflow_run_details,
            mcp__github_comment__update,
            mcp__github_comment__update_claude_comment,
            mcp__github_file_ops__commit_files,
            mcp__github_file_ops__delete_files,
            mcp__github_inline_comment__create_inline_comment,
            Bash,Read,Write,Edit,MultiEdit,Grep,Glob,WebFetch,WebSearch,TodoWrite"
          prompt: |
            REPO: ${{ github.repository }}
            ISSUE NUMBER: ${{ steps.extract-issue.outputs.issue_number }}
            
            ## Task: Implement GitHub Issue
            
            You need to implement the solution for issue #${{ steps.extract-issue.outputs.issue_number }}.
            
            ### Instructions:
            
            1. **Understand the requirements**: 
               - Get the issue details using mcp__github__get_issue
               - Review any comments with mcp__github__get_issue_comments
            
            2. **Implement the solution**:
               - Read existing files using mcp__github__get_file_contents or Read tool
               - Create or update files using mcp__github__create_or_update_file or Write/Edit tools
               - Follow existing code patterns and conventions
               - Add appropriate error handling
               - Include tests where applicable
            
            3. **Save your work**:
               - PREFERRED: Use mcp__github_file_ops__commit_files to commit changes
               - Create atomic, well-described commits
               - Use conventional commit format (feat:, fix:, docs:, etc.)
               - Reference issue #${{ steps.extract-issue.outputs.issue_number }} in commit messages
               - The branch "${{ steps.extract-issue.outputs.branch_name }}" has already been created for you
            
            4. **Create the Pull Request** (MANDATORY):
               YOU MUST create a pull request using mcp__github__create_pull_request tool:
               - title: "feat: Clear description of what you implemented"
               - body: "Fixes #${{ steps.extract-issue.outputs.issue_number }}\n\n## Summary\n[Your summary here]"
               - base: "master"
               - head: "${{ steps.extract-issue.outputs.branch_name }}"
               
               If MCP tool fails, use gh CLI as fallback:
               gh pr create --title "feat: [description]" --body "Fixes #${{ steps.extract-issue.outputs.issue_number }}" --base master --head ${{ steps.extract-issue.outputs.branch_name }}
            
            ### Critical Requirements:
            - You are already on branch: ${{ steps.extract-issue.outputs.branch_name }}
            - Do NOT create a new branch
            - You MUST create a PR - the task is incomplete without it
            - If one PR method fails, try the other
            
            FAILURE TO CREATE A PR MEANS THE TASK IS INCOMPLETE.

      # Post-processing: Create PR if Claude didn't
      - name: Ensure PR is created
        if: steps.check-permissions.outputs.is_authorized == 'true'
        env:
          # Use JAI_GITHUB_PAT for PR creation (has repo scope)
          GH_TOKEN: ${{ secrets.JAI_GITHUB_PAT }}
        run: |
          echo "üîç Checking if PR was created..."
          sleep 10  # Give Claude time to create PR
          
          # Check if PR exists for the branch
          EXISTING_PR=$(gh pr list --head "${{ steps.extract-issue.outputs.branch_name }}" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -z "$EXISTING_PR" ]]; then
            echo "‚ö†Ô∏è No PR found. Creating one automatically..."
            
            # First, ensure any uncommitted changes are pushed
            if [[ -n $(git status --porcelain) ]]; then
              echo "üìù Committing uncommitted changes..."
              git add -A
              git commit -m "feat: implement issue #${{ steps.extract-issue.outputs.issue_number }}
              
              Automated implementation by Claude
              
              Fixes #${{ steps.extract-issue.outputs.issue_number }}"
            fi
            
            # Push the branch
            git push -u origin "${{ steps.extract-issue.outputs.branch_name }}" 2>/dev/null || echo "Branch already exists on remote"
            
            # Create PR
            PR_BODY="Fixes #${{ steps.extract-issue.outputs.issue_number }}
            
            Summary: This PR implements the solution for issue #${{ steps.extract-issue.outputs.issue_number }}.
            
            Issue: ${{ steps.extract-issue.outputs.issue_title }}
            Author: @${{ steps.extract-issue.outputs.issue_author }}
            
            The changes in this PR were implemented by Claude Opus 4.1 through automated workflow.
            
            _ü§ñ PR created automatically after Claude implementation_"
            
            PR_URL=$(gh pr create \
              --title "feat: Implement #${{ steps.extract-issue.outputs.issue_number }} - ${{ steps.extract-issue.outputs.issue_title }}" \
              --body "$PR_BODY" \
              --base master \
              --head "${{ steps.extract-issue.outputs.branch_name }}" 2>/dev/null) || echo "PR may already exist"
            
            if [[ -n "$PR_URL" ]]; then
              echo "‚úÖ Created PR: $PR_URL"
              
              # Update issue with PR link
              gh issue comment ${{ steps.extract-issue.outputs.issue_number }} --body "‚úÖ **Pull Request Created**
              
              The implementation is complete and a pull request has been created:
              $PR_URL
              
              Branch: \`${{ steps.extract-issue.outputs.branch_name }}\`"
            fi
          else
            echo "‚úÖ PR #$EXISTING_PR already exists"
          fi
