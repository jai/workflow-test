---
name: Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, ready_for_review]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  # Job to post welcome message when PR is opened
  welcome:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for existing welcome message
        id: check-welcome
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if we already posted a welcome message
          WELCOME_EXISTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '[.[] | select(.body | contains("ü§ñ **Code Review Assistant**"))] | length')
          
          if [[ "$WELCOME_EXISTS" -gt 0 ]]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Welcome message already exists"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "üìù Need to post welcome message"
          fi

      - name: Post welcome message
        if: steps.check-welcome.outputs.found == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat <<'EOF'
          ü§ñ **Code Review Assistant**
          
          Welcome! This PR has access to AI-powered code reviews using **Claude Opus 4.1** - Anthropic's most powerful coding model.
          
          **How to trigger a review:**
          - üöÄ Mark your PR as "Ready for review" from draft status
          - üí¨ Tag `@claude` in any comment to ask questions or request a review
          - üìù Reply to inline code comments with `@claude` for specific feedback
          
          **What I can help with:**
          - Comprehensive code reviews (security, performance, best practices)
          - Answer specific technical questions
          - Suggest improvements and fixes
          - Review test coverage and documentation
          
          _Note: Only users with write, maintain, or admin permissions can trigger reviews._
          EOF
          )"

  # Main review job
  review:
    runs-on: ubuntu-latest
    # Only run if this is a PR ready for review, or if comment mentions @claude
    if: |
      github.event_name == 'pull_request' && github.event.action == 'ready_for_review' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    steps:
      # Check if the actor has write or admin permissions on the repository
      - name: Check actor permissions
        id: check-permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq .permission 2>/dev/null || echo "none")
          echo "Actor (${{ github.actor }}) has '${PERMISSION}' permission on this repository."
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "maintain" || "$PERMISSION" == "write" ]]; then
            echo "is_authorized=true" >> $GITHUB_OUTPUT
          else
            echo "is_authorized=false" >> $GITHUB_OUTPUT
            echo "::error::Actor does not have write, maintain, or admin permissions on this repository"
          fi

      - uses: actions/checkout@v4
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          fetch-depth: 0

      # Extract PR number based on event type
      - name: Extract PR number and context
        id: extract-context
        if: steps.check-permissions.outputs.is_authorized == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event_name }}"
          
          # Extract PR number
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "üìã PR number from pull_request event: $PR_NUMBER"
            CONTEXT_TYPE="full_review"
            COMMENT_BODY=""
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # For issue_comment events on PRs, the PR number is in issue.number
            # Verify this is actually a PR comment, not an issue comment
            if [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
              PR_NUMBER="${{ github.event.issue.number }}"
              echo "üí¨ PR number from issue_comment event: $PR_NUMBER"
              COMMENT_BODY="${{ github.event.comment.body }}"
              
              # Determine if this is a review request or a specific question
              if echo "$COMMENT_BODY" | grep -iE "review|check this|review this pr|full review" > /dev/null; then
                CONTEXT_TYPE="full_review"
              else
                CONTEXT_TYPE="specific_question"
              fi
            else
              echo "‚ö†Ô∏è Issue comment is not on a PR, skipping"
              echo "::notice::Skipping: Comment is on an issue, not a pull request"
              exit 0
            fi
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "üìù PR number from pull_request_review_comment event: $PR_NUMBER"
            COMMENT_BODY="${{ github.event.comment.body }}"
            CONTEXT_TYPE="inline_comment"
          else
            echo "‚ö†Ô∏è Could not determine PR number for event: ${{ github.event_name }}"
            echo "::error::Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "context_type=$CONTEXT_TYPE" >> $GITHUB_OUTPUT
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "‚úÖ Using PR number: $PR_NUMBER, Context: $CONTEXT_TYPE"

      # Determine if track_progress is supported for this event/action combination
      - name: Check track_progress support
        id: check-track-progress
        if: steps.check-permissions.outputs.is_authorized == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event_name }}, Action: ${{ github.event.action }}"

          # Check if this event/action combination supports track_progress
          case "${{ github.event_name }}" in
            pull_request)
              case "${{ github.event.action }}" in
                ready_for_review)
                  echo "track_progress=true" >> $GITHUB_OUTPUT
                  echo "‚úÖ track_progress supported for pull_request/${{ github.event.action }}"
                  ;;
                *)
                  echo "track_progress=false" >> $GITHUB_OUTPUT
                  echo "‚ö†Ô∏è track_progress not supported for pull_request/${{ github.event.action }}"
                  ;;
              esac
              ;;
            *)
              echo "track_progress=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è track_progress not supported for ${{ github.event_name }}/${{ github.event.action }}"
              ;;
          esac

      - uses: anthropics/claude-code-action@v1
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Use track_progress based on the check from the previous step
          # See: https://github.com/anthropics/claude-code-action/blob/main/docs/migration-guide.md#supported-events-for-track_progress
          track_progress: ${{ steps.check-track-progress.outputs.track_progress }}
          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__github_inline_comment__create_inline_comment,
            mcp__github_pulls__get_pull_request,
            mcp__github_pulls__list_pull_request_files,
            mcp__github_pulls__get_pull_request_diff,
            mcp__github_ci__get_ci_status,
            Bash,Read,Grep,Glob,WebFetch,WebSearch,TodoWrite"
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ steps.extract-context.outputs.pr_number }}
            CONTEXT TYPE: ${{ steps.extract-context.outputs.context_type }}
            
            # IMPORTANT: Read this context first
            
            You are Claude Opus 4.1, an AI code review assistant. Your response should be based on the context type:
            
            ## Context: ${{ steps.extract-context.outputs.context_type }}
            
            ${{ steps.extract-context.outputs.context_type == 'full_review' && 
            'This is a FULL REVIEW request. Perform a comprehensive code review.' || 
            steps.extract-context.outputs.context_type == 'inline_comment' && 
            'This is an INLINE COMMENT. Someone is asking about specific code. Answer their question directly.' ||
            'This is a SPECIFIC QUESTION. Answer only what was asked, do not perform a full review.' }}
            
            ## User's Message/Comment:
            ${{ steps.extract-context.outputs.comment_body }}
            
            ---
            
            # Instructions based on context:
            
            ${{ steps.extract-context.outputs.context_type == 'full_review' && 
            '## Perform a COMPREHENSIVE CODE REVIEW
            
            Focus on these areas:
            
            1. **Code Quality**
               - Clean code principles and best practices
               - Proper error handling and edge cases
               - Code readability and maintainability
            
            2. **Security**
               - Check for potential security vulnerabilities
               - Validate input sanitization
               - Review authentication/authorization logic
            
            3. **Performance**
               - Identify potential performance bottlenecks
               - Review database queries for efficiency
               - Check for memory leaks or resource issues
            
            4. **Testing**
               - Verify adequate test coverage
               - Review test quality and edge cases
               - Check for missing test scenarios
            
            5. **Documentation**
               - Ensure code is properly documented
               - Verify README updates for new features
               - Check API documentation accuracy
            
            Use inline comments ONLY for issues that need to be fixed or changed.
            Do NOT leave inline comments for praise or positive observations.
            Post a final summary review using gh pr comment.' ||
            '## Answer the specific question or comment
            
            1. Focus ONLY on what was asked
            2. Be direct and concise
            3. Do NOT perform a full code review unless explicitly requested
            4. If the comment contains a question, answer it directly
            5. If asking about specific code, provide focused feedback on just that code
            6. Use gh pr comment or reply to the thread as appropriate' }}
