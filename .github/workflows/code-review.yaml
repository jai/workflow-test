---
name: Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [ready_for_review]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # Check if the actor has write or admin permissions on the repository
      - name: Check actor permissions
        id: check-permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq .permission 2>/dev/null || echo "none")
          echo "Actor (${{ github.actor }}) has '${PERMISSION}' permission on this repository."
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "maintain" || "$PERMISSION" == "write" ]]; then
            echo "is_authorized=true" >> $GITHUB_OUTPUT
          else
            echo "is_authorized=false" >> $GITHUB_OUTPUT
            echo "::error::Actor does not have write, maintain, or admin permissions on this repository"
          fi

      - uses: actions/checkout@v4
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          fetch-depth: 0

      # Determine if track_progress is supported for this event/action combination
      - name: Check track_progress support
        id: check-track-progress
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event_name }}, Action: ${{ github.event.action }}"

          # Check if this event/action combination supports track_progress
          case "${{ github.event_name }}" in
            pull_request)
              case "${{ github.event.action }}" in
                ready_for_review)
                  echo "track_progress=true" >> $GITHUB_OUTPUT
                  echo "✅ track_progress supported for pull_request/${{ github.event.action }}"
                  ;;
                *)
                  echo "track_progress=false" >> $GITHUB_OUTPUT
                  echo "⚠️ track_progress not supported for pull_request/${{ github.event.action }}"
                  ;;
              esac
              ;;
            *)
              echo "track_progress=false" >> $GITHUB_OUTPUT
              echo "⚠️ track_progress not supported for ${{ github.event_name }}/${{ github.event.action }}"
              ;;
          esac

      - uses: anthropics/claude-code-action@v1
        if: steps.check-permissions.outputs.is_authorized == 'true'
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Use track_progress based on the check from the previous step
          # See: https://github.com/anthropics/claude-code-action/blob/main/docs/migration-guide.md#supported-events-for-track_progress
          track_progress: ${{ steps.check-track-progress.outputs.track_progress }}
          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__github_inline_comment__create_inline_comment,
            mcp__github_pulls__get_pull_request,
            mcp__github_pulls__list_pull_request_files,
            mcp__github_pulls__get_pull_request_diff,
            Bash(gh pr comment:*),Bash(gh pr review comment:*),
            Bash(gh pr view:*),Bash(gh pr diff:*),Bash(gh pr checks:*),
            Bash(gh issue comment:*),Bash(gh issue view:*),
            Read,Grep,Glob,WebFetch,WebSearch,TodoWrite"
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Ultrathink: Perform a comprehensive, deep-analysis code review with the following focus areas:

            1. **Code Quality**
               - Clean code principles and best practices
               - Proper error handling and edge cases
               - Code readability and maintainability

            2. **Security**
               - Check for potential security vulnerabilities
               - Validate input sanitization
               - Review authentication/authorization logic

            3. **Performance**
               - Identify potential performance bottlenecks
               - Review database queries for efficiency
               - Check for memory leaks or resource issues

            4. **Testing**
               - Verify adequate test coverage
               - Review test quality and edge cases
               - Check for missing test scenarios

            5. **Documentation**
               - Ensure code is properly documented
               - Verify README updates for new features
               - Check API documentation accuracy

            Use inline comments ONLY for issues that need to be fixed or changed.
            Do NOT leave inline comments for praise or positive observations.
            Avoid general observations, praise, or summary. If necessary, add them into the main code review and not in code review/inline comments.

            Don't forget to post the final review using 'gh pr comment'
